"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-seo";
exports.ids = ["vendor-chunks/next-seo"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-seo/lib/next-seo.module.js":
/*!******************************************************!*\
  !*** ./node_modules/next-seo/lib/next-seo.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArticleJsonLd: () => (/* binding */ ArticleJsonLd),\n/* harmony export */   BrandJsonLd: () => (/* binding */ BrandJsonLd),\n/* harmony export */   BreadcrumbJsonLd: () => (/* binding */ BreadCrumbJsonLd),\n/* harmony export */   CampgroundJsonLd: () => (/* binding */ CampgroundJsonLd),\n/* harmony export */   CarouselJsonLd: () => (/* binding */ CarouselJsonLd),\n/* harmony export */   CollectionPageJsonLd: () => (/* binding */ CollectionPageJsonLd),\n/* harmony export */   CorporateContactJsonLd: () => (/* binding */ CorporateContactJsonLd),\n/* harmony export */   CourseJsonLd: () => (/* binding */ CourseJsonLd),\n/* harmony export */   DatasetJsonLd: () => (/* binding */ DatasetJsonLd),\n/* harmony export */   DefaultSeo: () => (/* binding */ DefaultSeo),\n/* harmony export */   EventJsonLd: () => (/* binding */ EventJsonLd),\n/* harmony export */   FAQPageJsonLd: () => (/* binding */ FAQPageJsonLd),\n/* harmony export */   HowToJsonLd: () => (/* binding */ howToJsonLd),\n/* harmony export */   ImageJsonLd: () => (/* binding */ ImageJsonLd),\n/* harmony export */   JobPostingJsonLd: () => (/* binding */ JobPostingJsonLd),\n/* harmony export */   LocalBusinessJsonLd: () => (/* binding */ LocalBusinessJsonLd),\n/* harmony export */   LogoJsonLd: () => (/* binding */ LogoJsonLd),\n/* harmony export */   NewsArticleJsonLd: () => (/* binding */ NewsArticleJsonLd),\n/* harmony export */   NextSeo: () => (/* binding */ NextSeo),\n/* harmony export */   OrganizationJsonLd: () => (/* binding */ OrganizationJsonLd),\n/* harmony export */   ParkJsonLd: () => (/* binding */ ParkJsonLd),\n/* harmony export */   ProductJsonLd: () => (/* binding */ ProductJsonLd),\n/* harmony export */   ProfilePageJsonLd: () => (/* binding */ ProfilePageJsonLd),\n/* harmony export */   QAPageJsonLd: () => (/* binding */ QAPageJsonLd),\n/* harmony export */   RecipeJsonLd: () => (/* binding */ RecipeJsonLd),\n/* harmony export */   SiteLinksSearchBoxJsonLd: () => (/* binding */ SiteLinksSearchBoxJsonLd),\n/* harmony export */   SocialProfileJsonLd: () => (/* binding */ SocialProfileJsonLd),\n/* harmony export */   SoftwareAppJsonLd: () => (/* binding */ SoftwareAppJsonLd),\n/* harmony export */   VideoGameJsonLd: () => (/* binding */ VideoGameJsonLd),\n/* harmony export */   VideoJsonLd: () => (/* binding */ VideoJsonLd),\n/* harmony export */   WebPageJsonLd: () => (/* binding */ WebPageJsonLd)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"(ssr)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar _excluded$z = [\n    \"keyOverride\"\n], _excluded2$2 = [\n    \"crossOrigin\"\n];\nvar defaults = {\n    templateTitle: \"\",\n    noindex: false,\n    nofollow: false,\n    norobots: false,\n    defaultOpenGraphImageWidth: 0,\n    defaultOpenGraphImageHeight: 0,\n    defaultOpenGraphVideoWidth: 0,\n    defaultOpenGraphVideoHeight: 0\n};\nvar buildOpenGraphMediaTags = function buildOpenGraphMediaTags(mediaType, media, _temp) {\n    if (media === void 0) {\n        media = [];\n    }\n    var _ref = _temp === void 0 ? {} : _temp, defaultWidth = _ref.defaultWidth, defaultHeight = _ref.defaultHeight;\n    return media.reduce(function(tags, medium, index) {\n        tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"og:\" + mediaType + \":0\" + index,\n            property: \"og:\" + mediaType,\n            content: medium.url\n        }));\n        if (medium.alt) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":alt0\" + index,\n                property: \"og:\" + mediaType + \":alt\",\n                content: medium.alt\n            }));\n        }\n        if (medium.secureUrl) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":secure_url0\" + index,\n                property: \"og:\" + mediaType + \":secure_url\",\n                content: medium.secureUrl.toString()\n            }));\n        }\n        if (medium.type) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":type0\" + index,\n                property: \"og:\" + mediaType + \":type\",\n                content: medium.type.toString()\n            }));\n        }\n        if (medium.width) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":width0\" + index,\n                property: \"og:\" + mediaType + \":width\",\n                content: medium.width.toString()\n            }));\n        } else if (defaultWidth) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":width0\" + index,\n                property: \"og:\" + mediaType + \":width\",\n                content: defaultWidth.toString()\n            }));\n        }\n        if (medium.height) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":height\" + index,\n                property: \"og:\" + mediaType + \":height\",\n                content: medium.height.toString()\n            }));\n        } else if (defaultHeight) {\n            tags.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:\" + mediaType + \":height\" + index,\n                property: \"og:\" + mediaType + \":height\",\n                content: defaultHeight.toString()\n            }));\n        }\n        return tags;\n    }, []);\n};\nvar buildTags = function buildTags(config) {\n    var _config$openGraph, _config$openGraph3, _config$additionalLin;\n    var tagsToRender = [];\n    if (config.titleTemplate) {\n        defaults.templateTitle = config.titleTemplate;\n    }\n    var updatedTitle = \"\";\n    if (config.title) {\n        updatedTitle = config.title;\n        if (defaults.templateTitle) {\n            updatedTitle = defaults.templateTitle.replace(/%s/g, function() {\n                return updatedTitle;\n            });\n        }\n    } else if (config.defaultTitle) {\n        updatedTitle = config.defaultTitle;\n    }\n    if (updatedTitle) {\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"title\", {\n            key: \"title\"\n        }, updatedTitle));\n    }\n    var noindex = config.noindex === undefined ? defaults.noindex || config.dangerouslySetAllPagesToNoIndex : config.noindex;\n    var nofollow = config.nofollow === undefined ? defaults.nofollow || config.dangerouslySetAllPagesToNoFollow : config.nofollow;\n    var norobots = config.norobots || defaults.norobots;\n    var robotsParams = \"\";\n    if (config.robotsProps) {\n        var _config$robotsProps = config.robotsProps, nosnippet = _config$robotsProps.nosnippet, maxSnippet = _config$robotsProps.maxSnippet, maxImagePreview = _config$robotsProps.maxImagePreview, maxVideoPreview = _config$robotsProps.maxVideoPreview, noarchive = _config$robotsProps.noarchive, noimageindex = _config$robotsProps.noimageindex, notranslate = _config$robotsProps.notranslate, unavailableAfter = _config$robotsProps.unavailableAfter;\n        robotsParams = \"\" + (nosnippet ? \",nosnippet\" : \"\") + (maxSnippet ? \",max-snippet:\" + maxSnippet : \"\") + (maxImagePreview ? \",max-image-preview:\" + maxImagePreview : \"\") + (noarchive ? \",noarchive\" : \"\") + (unavailableAfter ? \",unavailable_after:\" + unavailableAfter : \"\") + (noimageindex ? \",noimageindex\" : \"\") + (maxVideoPreview ? \",max-video-preview:\" + maxVideoPreview : \"\") + (notranslate ? \",notranslate\" : \"\");\n    }\n    if (config.norobots) {\n        defaults.norobots = true;\n    }\n    if (noindex || nofollow) {\n        if (config.dangerouslySetAllPagesToNoIndex) {\n            defaults.noindex = true;\n        }\n        if (config.dangerouslySetAllPagesToNoFollow) {\n            defaults.nofollow = true;\n        }\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"robots\",\n            name: \"robots\",\n            content: (noindex ? \"noindex\" : \"index\") + \",\" + (nofollow ? \"nofollow\" : \"follow\") + robotsParams\n        }));\n    } else if (!norobots || robotsParams) {\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"robots\",\n            name: \"robots\",\n            content: \"index,follow\" + robotsParams\n        }));\n    }\n    if (config.description) {\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"description\",\n            name: \"description\",\n            content: config.description\n        }));\n    }\n    if (config.themeColor) {\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"theme-color\",\n            name: \"theme-color\",\n            content: config.themeColor\n        }));\n    }\n    if (config.mobileAlternate) {\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", {\n            rel: \"alternate\",\n            key: \"mobileAlternate\",\n            media: config.mobileAlternate.media,\n            href: config.mobileAlternate.href\n        }));\n    }\n    if (config.languageAlternates && config.languageAlternates.length > 0) {\n        config.languageAlternates.forEach(function(languageAlternate) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", {\n                rel: \"alternate\",\n                key: \"languageAlternate-\" + languageAlternate.hrefLang,\n                hrefLang: languageAlternate.hrefLang,\n                href: languageAlternate.href\n            }));\n        });\n    }\n    if (config.twitter) {\n        if (config.twitter.cardType) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"twitter:card\",\n                name: \"twitter:card\",\n                content: config.twitter.cardType\n            }));\n        }\n        if (config.twitter.site) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"twitter:site\",\n                name: \"twitter:site\",\n                content: config.twitter.site\n            }));\n        }\n        if (config.twitter.handle) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"twitter:creator\",\n                name: \"twitter:creator\",\n                content: config.twitter.handle\n            }));\n        }\n    }\n    if (config.facebook) {\n        if (config.facebook.appId) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"fb:app_id\",\n                property: \"fb:app_id\",\n                content: config.facebook.appId\n            }));\n        }\n    }\n    if ((_config$openGraph = config.openGraph) != null && _config$openGraph.title || updatedTitle) {\n        var _config$openGraph2;\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"og:title\",\n            property: \"og:title\",\n            content: ((_config$openGraph2 = config.openGraph) == null ? void 0 : _config$openGraph2.title) || updatedTitle\n        }));\n    }\n    if ((_config$openGraph3 = config.openGraph) != null && _config$openGraph3.description || config.description) {\n        var _config$openGraph4;\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"og:description\",\n            property: \"og:description\",\n            content: ((_config$openGraph4 = config.openGraph) == null ? void 0 : _config$openGraph4.description) || config.description\n        }));\n    }\n    if (config.openGraph) {\n        if (config.openGraph.url || config.canonical) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:url\",\n                property: \"og:url\",\n                content: config.openGraph.url || config.canonical\n            }));\n        }\n        if (config.openGraph.type) {\n            var type = config.openGraph.type.toLowerCase();\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:type\",\n                property: \"og:type\",\n                content: type\n            }));\n            if (type === \"profile\" && config.openGraph.profile) {\n                if (config.openGraph.profile.firstName) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"profile:first_name\",\n                        property: \"profile:first_name\",\n                        content: config.openGraph.profile.firstName\n                    }));\n                }\n                if (config.openGraph.profile.lastName) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"profile:last_name\",\n                        property: \"profile:last_name\",\n                        content: config.openGraph.profile.lastName\n                    }));\n                }\n                if (config.openGraph.profile.username) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"profile:username\",\n                        property: \"profile:username\",\n                        content: config.openGraph.profile.username\n                    }));\n                }\n                if (config.openGraph.profile.gender) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"profile:gender\",\n                        property: \"profile:gender\",\n                        content: config.openGraph.profile.gender\n                    }));\n                }\n            } else if (type === \"book\" && config.openGraph.book) {\n                if (config.openGraph.book.authors && config.openGraph.book.authors.length) {\n                    config.openGraph.book.authors.forEach(function(author, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"book:author:0\" + index,\n                            property: \"book:author\",\n                            content: author\n                        }));\n                    });\n                }\n                if (config.openGraph.book.isbn) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"book:isbn\",\n                        property: \"book:isbn\",\n                        content: config.openGraph.book.isbn\n                    }));\n                }\n                if (config.openGraph.book.releaseDate) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"book:release_date\",\n                        property: \"book:release_date\",\n                        content: config.openGraph.book.releaseDate\n                    }));\n                }\n                if (config.openGraph.book.tags && config.openGraph.book.tags.length) {\n                    config.openGraph.book.tags.forEach(function(tag, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"book:tag:0\" + index,\n                            property: \"book:tag\",\n                            content: tag\n                        }));\n                    });\n                }\n            } else if (type === \"article\" && config.openGraph.article) {\n                if (config.openGraph.article.publishedTime) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"article:published_time\",\n                        property: \"article:published_time\",\n                        content: config.openGraph.article.publishedTime\n                    }));\n                }\n                if (config.openGraph.article.modifiedTime) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"article:modified_time\",\n                        property: \"article:modified_time\",\n                        content: config.openGraph.article.modifiedTime\n                    }));\n                }\n                if (config.openGraph.article.expirationTime) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"article:expiration_time\",\n                        property: \"article:expiration_time\",\n                        content: config.openGraph.article.expirationTime\n                    }));\n                }\n                if (config.openGraph.article.authors && config.openGraph.article.authors.length) {\n                    config.openGraph.article.authors.forEach(function(author, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"article:author:0\" + index,\n                            property: \"article:author\",\n                            content: author\n                        }));\n                    });\n                }\n                if (config.openGraph.article.section) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"article:section\",\n                        property: \"article:section\",\n                        content: config.openGraph.article.section\n                    }));\n                }\n                if (config.openGraph.article.tags && config.openGraph.article.tags.length) {\n                    config.openGraph.article.tags.forEach(function(tag, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"article:tag:0\" + index,\n                            property: \"article:tag\",\n                            content: tag\n                        }));\n                    });\n                }\n            } else if ((type === \"video.movie\" || type === \"video.episode\" || type === \"video.tv_show\" || type === \"video.other\") && config.openGraph.video) {\n                if (config.openGraph.video.actors && config.openGraph.video.actors.length) {\n                    config.openGraph.video.actors.forEach(function(actor, index) {\n                        if (actor.profile) {\n                            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                                key: \"video:actor:0\" + index,\n                                property: \"video:actor\",\n                                content: actor.profile\n                            }));\n                        }\n                        if (actor.role) {\n                            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                                key: \"video:actor:role:0\" + index,\n                                property: \"video:actor:role\",\n                                content: actor.role\n                            }));\n                        }\n                    });\n                }\n                if (config.openGraph.video.directors && config.openGraph.video.directors.length) {\n                    config.openGraph.video.directors.forEach(function(director, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"video:director:0\" + index,\n                            property: \"video:director\",\n                            content: director\n                        }));\n                    });\n                }\n                if (config.openGraph.video.writers && config.openGraph.video.writers.length) {\n                    config.openGraph.video.writers.forEach(function(writer, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"video:writer:0\" + index,\n                            property: \"video:writer\",\n                            content: writer\n                        }));\n                    });\n                }\n                if (config.openGraph.video.duration) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"video:duration\",\n                        property: \"video:duration\",\n                        content: config.openGraph.video.duration.toString()\n                    }));\n                }\n                if (config.openGraph.video.releaseDate) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"video:release_date\",\n                        property: \"video:release_date\",\n                        content: config.openGraph.video.releaseDate\n                    }));\n                }\n                if (config.openGraph.video.tags && config.openGraph.video.tags.length) {\n                    config.openGraph.video.tags.forEach(function(tag, index) {\n                        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                            key: \"video:tag:0\" + index,\n                            property: \"video:tag\",\n                            content: tag\n                        }));\n                    });\n                }\n                if (config.openGraph.video.series) {\n                    tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                        key: \"video:series\",\n                        property: \"video:series\",\n                        content: config.openGraph.video.series\n                    }));\n                }\n            }\n        }\n        // images\n        if (config.defaultOpenGraphImageWidth) {\n            defaults.defaultOpenGraphImageWidth = config.defaultOpenGraphImageWidth;\n        }\n        if (config.defaultOpenGraphImageHeight) {\n            defaults.defaultOpenGraphImageHeight = config.defaultOpenGraphImageHeight;\n        }\n        if (config.openGraph.images && config.openGraph.images.length) {\n            tagsToRender.push.apply(tagsToRender, buildOpenGraphMediaTags(\"image\", config.openGraph.images, {\n                defaultWidth: defaults.defaultOpenGraphImageWidth,\n                defaultHeight: defaults.defaultOpenGraphImageHeight\n            }));\n        }\n        // videos\n        if (config.defaultOpenGraphVideoWidth) {\n            defaults.defaultOpenGraphVideoWidth = config.defaultOpenGraphVideoWidth;\n        }\n        if (config.defaultOpenGraphVideoHeight) {\n            defaults.defaultOpenGraphVideoHeight = config.defaultOpenGraphVideoHeight;\n        }\n        if (config.openGraph.videos && config.openGraph.videos.length) {\n            tagsToRender.push.apply(tagsToRender, buildOpenGraphMediaTags(\"video\", config.openGraph.videos, {\n                defaultWidth: defaults.defaultOpenGraphVideoWidth,\n                defaultHeight: defaults.defaultOpenGraphVideoHeight\n            }));\n        }\n        // audio\n        if (config.openGraph.audio) {\n            tagsToRender.push.apply(tagsToRender, buildOpenGraphMediaTags(\"audio\", config.openGraph.audio));\n        }\n        if (config.openGraph.locale) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:locale\",\n                property: \"og:locale\",\n                content: config.openGraph.locale\n            }));\n        }\n        if (config.openGraph.siteName || config.openGraph.site_name) {\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"og:site_name\",\n                property: \"og:site_name\",\n                content: config.openGraph.siteName || config.openGraph.site_name\n            }));\n        }\n    }\n    if (config.canonical) {\n        tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", {\n            rel: \"canonical\",\n            href: config.canonical,\n            key: \"canonical\"\n        }));\n    }\n    if (config.additionalMetaTags && config.additionalMetaTags.length > 0) {\n        config.additionalMetaTags.forEach(function(_ref2) {\n            var _ref3, _ref4;\n            var keyOverride = _ref2.keyOverride, tag = _objectWithoutPropertiesLoose(_ref2, _excluded$z);\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", _extends({\n                key: \"meta:\" + ((_ref3 = (_ref4 = keyOverride != null ? keyOverride : tag.name) != null ? _ref4 : tag.property) != null ? _ref3 : tag.httpEquiv)\n            }, tag)));\n        });\n    }\n    if ((_config$additionalLin = config.additionalLinkTags) != null && _config$additionalLin.length) {\n        config.additionalLinkTags.forEach(function(tag) {\n            var _rest$keyOverride;\n            var tagCrossOrigin = tag.crossOrigin, rest = _objectWithoutPropertiesLoose(tag, _excluded2$2);\n            var crossOrigin = tagCrossOrigin === \"anonymous\" || tagCrossOrigin === \"use-credentials\" || tagCrossOrigin === \"\" ? tagCrossOrigin : undefined;\n            tagsToRender.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", _extends({\n                key: \"link\" + ((_rest$keyOverride = rest.keyOverride) != null ? _rest$keyOverride : rest.href) + rest.rel\n            }, rest, {\n                crossOrigin: crossOrigin\n            })));\n        });\n    }\n    return tagsToRender;\n};\nvar WithHead = function WithHead(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((next_head__WEBPACK_IMPORTED_MODULE_1___default()), null, buildTags(props));\n};\nvar DefaultSeo = function DefaultSeo(_ref) {\n    var title = _ref.title, titleTemplate = _ref.titleTemplate, defaultTitle = _ref.defaultTitle, themeColor = _ref.themeColor, _ref$dangerouslySetAl = _ref.dangerouslySetAllPagesToNoIndex, dangerouslySetAllPagesToNoIndex = _ref$dangerouslySetAl === void 0 ? false : _ref$dangerouslySetAl, _ref$dangerouslySetAl2 = _ref.dangerouslySetAllPagesToNoFollow, dangerouslySetAllPagesToNoFollow = _ref$dangerouslySetAl2 === void 0 ? false : _ref$dangerouslySetAl2, description = _ref.description, canonical = _ref.canonical, facebook = _ref.facebook, openGraph = _ref.openGraph, additionalMetaTags = _ref.additionalMetaTags, twitter = _ref.twitter, defaultOpenGraphImageWidth = _ref.defaultOpenGraphImageWidth, defaultOpenGraphImageHeight = _ref.defaultOpenGraphImageHeight, defaultOpenGraphVideoWidth = _ref.defaultOpenGraphVideoWidth, defaultOpenGraphVideoHeight = _ref.defaultOpenGraphVideoHeight, mobileAlternate = _ref.mobileAlternate, languageAlternates = _ref.languageAlternates, additionalLinkTags = _ref.additionalLinkTags, robotsProps = _ref.robotsProps, norobots = _ref.norobots;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WithHead, {\n        title: title,\n        titleTemplate: titleTemplate,\n        defaultTitle: defaultTitle,\n        themeColor: themeColor,\n        dangerouslySetAllPagesToNoIndex: dangerouslySetAllPagesToNoIndex,\n        dangerouslySetAllPagesToNoFollow: dangerouslySetAllPagesToNoFollow,\n        description: description,\n        canonical: canonical,\n        facebook: facebook,\n        openGraph: openGraph,\n        additionalMetaTags: additionalMetaTags,\n        twitter: twitter,\n        defaultOpenGraphImageWidth: defaultOpenGraphImageWidth,\n        defaultOpenGraphImageHeight: defaultOpenGraphImageHeight,\n        defaultOpenGraphVideoWidth: defaultOpenGraphVideoWidth,\n        defaultOpenGraphVideoHeight: defaultOpenGraphVideoHeight,\n        mobileAlternate: mobileAlternate,\n        languageAlternates: languageAlternates,\n        additionalLinkTags: additionalLinkTags,\n        robotsProps: robotsProps,\n        norobots: norobots\n    });\n};\nvar NextSeo = function NextSeo(_ref) {\n    var title = _ref.title, themeColor = _ref.themeColor, noindex = _ref.noindex, nofollow = _ref.nofollow, robotsProps = _ref.robotsProps, description = _ref.description, canonical = _ref.canonical, openGraph = _ref.openGraph, facebook = _ref.facebook, twitter = _ref.twitter, additionalMetaTags = _ref.additionalMetaTags, titleTemplate = _ref.titleTemplate, defaultTitle = _ref.defaultTitle, mobileAlternate = _ref.mobileAlternate, languageAlternates = _ref.languageAlternates, additionalLinkTags = _ref.additionalLinkTags;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WithHead, {\n        title: title,\n        themeColor: themeColor,\n        noindex: noindex,\n        nofollow: nofollow,\n        robotsProps: robotsProps,\n        description: description,\n        canonical: canonical,\n        facebook: facebook,\n        openGraph: openGraph,\n        additionalMetaTags: additionalMetaTags,\n        twitter: twitter,\n        titleTemplate: titleTemplate,\n        defaultTitle: defaultTitle,\n        mobileAlternate: mobileAlternate,\n        languageAlternates: languageAlternates,\n        additionalLinkTags: additionalLinkTags\n    }));\n};\nvar toJson = function toJson(type, jsonld) {\n    var data = jsonld;\n    if (Array.isArray(data) && data.length === 1) {\n        data = _extends({}, jsonld[0]);\n    }\n    var jsonLdObject = Array.isArray(data) ? data.map(function(item) {\n        return formatObjectForSchema(type, item);\n    }) : formatObjectForSchema(type, data);\n    return {\n        __html: JSON.stringify(jsonLdObject, safeJsonLdReplacer)\n    };\n};\nvar formatObjectForSchema = function formatObjectForSchema(type, jsonld) {\n    var _jsonld$id = jsonld.id, id = _jsonld$id === void 0 ? undefined : _jsonld$id;\n    var updated = _extends({}, id ? {\n        \"@id\": jsonld.id\n    } : {}, jsonld);\n    delete updated.id;\n    return _extends({\n        \"@context\": \"https://schema.org\",\n        \"@type\": type\n    }, updated);\n};\nvar ESCAPE_ENTITIES = Object.freeze({\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\"\n});\nvar ESCAPE_REGEX = new RegExp(\"[\" + Object.keys(ESCAPE_ENTITIES).join(\"\") + \"]\", \"g\");\nvar ESCAPE_REPLACER = function ESCAPE_REPLACER(t) {\n    return ESCAPE_ENTITIES[t];\n};\n/**\n * A replacer for JSON.stringify to strip JSON-LD of illegal HTML entities\n * per https://www.w3.org/TR/json-ld11/#restrictions-for-contents-of-json-ld-script-elements\n */ var safeJsonLdReplacer = function() {\n    // Replace per https://www.w3.org/TR/json-ld11/#restrictions-for-contents-of-json-ld-script-elements\n    // Solution from https://stackoverflow.com/a/5499821/864313\n    return function(_, value) {\n        switch(typeof value){\n            case \"object\":\n                // Omit null values.\n                if (value === null) {\n                    return undefined;\n                }\n                return value;\n            // JSON.stringify will recursively call replacer.\n            case \"number\":\n            case \"boolean\":\n            case \"bigint\":\n                return value;\n            // These values are not risky.\n            case \"string\":\n                return value.replace(ESCAPE_REGEX, ESCAPE_REPLACER);\n            default:\n                {\n                    // JSON.stringify will remove this element.\n                    return undefined;\n                }\n        }\n    };\n}();\nvar _excluded$y = [\n    \"type\",\n    \"keyOverride\",\n    \"scriptKey\",\n    \"scriptId\",\n    \"dataArray\",\n    \"useAppDir\"\n];\nfunction JsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Thing\" : _ref$type, keyOverride = _ref.keyOverride, scriptKey = _ref.scriptKey, _ref$scriptId = _ref.scriptId, scriptId = _ref$scriptId === void 0 ? undefined : _ref$scriptId, dataArray = _ref.dataArray, _ref$useAppDir = _ref.useAppDir, useAppDir = _ref$useAppDir === void 0 ? false : _ref$useAppDir, rest = _objectWithoutPropertiesLoose(_ref, _excluded$y);\n    var JsonLdScript = function JsonLdScript() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"script\", {\n            type: \"application/ld+json\",\n            id: scriptId,\n            \"data-testid\": scriptId,\n            dangerouslySetInnerHTML: toJson(type, dataArray === undefined ? _extends({}, rest) : dataArray),\n            key: \"jsonld-\" + scriptKey + (keyOverride ? \"-\" + keyOverride : \"\")\n        });\n    };\n    if (useAppDir) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLdScript, null);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((next_head__WEBPACK_IMPORTED_MODULE_1___default()), null, JsonLdScript());\n}\n/**\n * Generate author information\n * @param author\n * @returns\n */ function generateAuthorInfo(author) {\n    if (typeof author === \"string\") {\n        return {\n            \"@type\": \"Person\",\n            name: author\n        };\n    } else if (!!author.name) {\n        var _author$type;\n        return {\n            \"@type\": (_author$type = author == null ? void 0 : author.type) != null ? _author$type : \"Person\",\n            name: author.name,\n            url: author == null ? void 0 : author.url\n        };\n    }\n    return;\n}\nfunction setAuthor(author) {\n    if (Array.isArray(author)) {\n        return author.map(function(item) {\n            return generateAuthorInfo(item);\n        }).filter(function(item) {\n            return !!item;\n        });\n    } else if (author) {\n        return generateAuthorInfo(author);\n    }\n    return;\n}\nfunction setImage(image) {\n    if (image) {\n        return {\n            \"@type\": \"ImageObject\",\n            url: image\n        };\n    }\n    return undefined;\n}\nfunction setPublisher(publisherName, publisherLogo) {\n    if (!publisherName) {\n        return undefined;\n    }\n    return {\n        \"@type\": \"Organization\",\n        name: publisherName,\n        logo: setImage(publisherLogo)\n    };\n}\nfunction setReviewRating(rating) {\n    if (rating) {\n        return _extends({}, rating, {\n            \"@type\": \"Rating\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$x = [\n    \"reviewRating\",\n    \"author\",\n    \"publisher\"\n];\nfunction setReviews(reviews) {\n    function mapReview(_ref) {\n        var reviewRating = _ref.reviewRating, author = _ref.author, publisher = _ref.publisher, rest = _objectWithoutPropertiesLoose(_ref, _excluded$x);\n        return _extends({}, rest, {\n            \"@type\": \"Review\"\n        }, author && {\n            author: setAuthor(author)\n        }, reviewRating && {\n            reviewRating: setReviewRating(reviewRating)\n        }, publisher && {\n            publisher: setPublisher(publisher.name)\n        });\n    }\n    if (Array.isArray(reviews)) {\n        return reviews.map(mapReview);\n    } else if (reviews) {\n        return mapReview(reviews);\n    }\n    return undefined;\n}\nfunction setNutrition(calories) {\n    if (calories) {\n        return {\n            \"@type\": \"NutritionInformation\",\n            calories: calories + \" calories\"\n        };\n    }\n    return undefined;\n}\nfunction setAggregateRating(aggregateRating) {\n    if (aggregateRating) {\n        return {\n            \"@type\": \"AggregateRating\",\n            ratingCount: aggregateRating.ratingCount,\n            reviewCount: aggregateRating.reviewCount,\n            bestRating: aggregateRating.bestRating,\n            ratingValue: aggregateRating.ratingValue,\n            worstRating: aggregateRating.worstRating\n        };\n    }\n    return undefined;\n}\nfunction setClip(clips) {\n    function mapClip(clip) {\n        return _extends({}, clip, {\n            \"@type\": \"Clip\"\n        });\n    }\n    if (Array.isArray(clips)) {\n        return clips.map(mapClip);\n    } else if (clips) {\n        return mapClip(clips);\n    }\n    return undefined;\n}\nfunction setInteractionStatistic(watchCount) {\n    if (watchCount) {\n        return {\n            \"@type\": \"InteractionCounter\",\n            interactionType: \"https://schema.org/WatchAction\",\n            userInteractionCount: watchCount\n        };\n    }\n    return undefined;\n}\nfunction setBroadcastEvent(publication) {\n    function mapBroadcastEvent(publication) {\n        return _extends({}, publication, {\n            \"@type\": \"BroadcastEvent\"\n        });\n    }\n    if (publication) {\n        if (Array.isArray(publication)) {\n            return publication.map(mapBroadcastEvent);\n        }\n        return mapBroadcastEvent(publication);\n    }\n    return undefined;\n}\nvar _excluded$w = [\n    \"thumbnailUrls\",\n    \"hasPart\",\n    \"watchCount\",\n    \"publication\"\n];\nfunction setVideo(video, setContext) {\n    if (setContext === void 0) {\n        setContext = false;\n    }\n    function mapVideo(_ref, context) {\n        var thumbnailUrls = _ref.thumbnailUrls, hasPart = _ref.hasPart, watchCount = _ref.watchCount, publication = _ref.publication, rest = _objectWithoutPropertiesLoose(_ref, _excluded$w);\n        return _extends({}, rest, {\n            \"@type\": \"VideoObject\"\n        }, context && {\n            \"@context\": \"https://schema.org\"\n        }, {\n            thumbnailUrl: thumbnailUrls,\n            hasPart: setClip(hasPart),\n            interactionStatistic: setInteractionStatistic(watchCount),\n            publication: setBroadcastEvent(publication)\n        });\n    }\n    if (video) {\n        return mapVideo(video, setContext);\n    }\n    return undefined;\n}\nfunction setInstruction(instruction) {\n    if (instruction) {\n        return _extends({}, instruction, {\n            \"@type\": \"HowToStep\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$v = [\n    \"type\",\n    \"keyOverride\",\n    \"ofType\",\n    \"data\"\n], _excluded2$1 = [\n    \"authorName\",\n    \"images\",\n    \"yields\",\n    \"category\",\n    \"calories\",\n    \"aggregateRating\",\n    \"video\",\n    \"ingredients\",\n    \"instructions\",\n    \"cuisine\"\n];\nfunction CarouselJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Carousel\" : _ref$type, keyOverride = _ref.keyOverride, ofType = _ref.ofType, data = _ref.data, rest = _objectWithoutPropertiesLoose(_ref, _excluded$v);\n    function generateList(data, ofType) {\n        switch(ofType){\n            case \"default\":\n                return data.map(function(item, index) {\n                    return {\n                        \"@type\": \"ListItem\",\n                        position: \"\" + (index + 1),\n                        url: item.url\n                    };\n                });\n            case \"course\":\n                return data.map(function(item, index) {\n                    return {\n                        \"@type\": \"ListItem\",\n                        position: \"\" + (index + 1),\n                        item: {\n                            \"@context\": \"https://schema.org\",\n                            \"@type\": \"Course\",\n                            url: item.url,\n                            name: item.courseName,\n                            description: item.description,\n                            provider: {\n                                \"@type\": \"Organization\",\n                                name: item.providerName,\n                                sameAs: item.providerUrl\n                            }\n                        }\n                    };\n                });\n            case \"movie\":\n                return data.map(function(item, index) {\n                    return {\n                        \"@type\": \"ListItem\",\n                        position: \"\" + (index + 1),\n                        item: {\n                            \"@context\": \"https://schema.org\",\n                            \"@type\": \"Movie\",\n                            name: item.name,\n                            url: item.url,\n                            image: item.image,\n                            dateCreated: item.dateCreated,\n                            director: item.director ? Array.isArray(item.director) ? item.director.map(function(director) {\n                                return {\n                                    \"@type\": \"Person\",\n                                    name: director.name\n                                };\n                            }) : {\n                                \"@type\": \"Person\",\n                                name: item.director.name\n                            } : undefined,\n                            review: setReviews(item.review)\n                        }\n                    };\n                });\n            case \"recipe\":\n                return data.map(function(_ref2, index) {\n                    var authorName = _ref2.authorName, images = _ref2.images, yields = _ref2.yields, category = _ref2.category, calories = _ref2.calories, aggregateRating = _ref2.aggregateRating, video = _ref2.video, ingredients = _ref2.ingredients, instructions = _ref2.instructions, cuisine = _ref2.cuisine, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n                    return {\n                        \"@type\": \"ListItem\",\n                        position: \"\" + (index + 1),\n                        item: _extends({\n                            \"@context\": \"https://schema.org\",\n                            \"@type\": \"Recipe\"\n                        }, rest, {\n                            author: setAuthor(authorName),\n                            image: images,\n                            recipeYield: yields,\n                            recipeCategory: category,\n                            recipeCuisine: cuisine,\n                            nutrition: setNutrition(calories),\n                            aggregateRating: setAggregateRating(aggregateRating),\n                            video: setVideo(video),\n                            recipeIngredient: ingredients,\n                            recipeInstructions: instructions.map(setInstruction)\n                        })\n                    };\n                });\n            case \"custom\":\n                return data.map(function(item, index) {\n                    var _item$position;\n                    return {\n                        \"@type\": \"ListItem\",\n                        position: (_item$position = item.position) != null ? _item$position : index + 1,\n                        item: {\n                            \"@type\": item.type,\n                            name: item.name\n                        }\n                    };\n                });\n        }\n    }\n    var jsonLdData = _extends({\n        \"@type\": \"ItemList\"\n    }, rest, {\n        itemListElement: generateList(data, ofType)\n    }, rest);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, jsonLdData, {\n        scriptKey: \"Carousel\"\n    }));\n}\nvar _excluded$u = [\n    \"type\",\n    \"keyOverride\",\n    \"url\",\n    \"title\",\n    \"images\",\n    \"section\",\n    \"dateCreated\",\n    \"datePublished\",\n    \"dateModified\",\n    \"authorName\",\n    \"authorType\",\n    \"publisherName\",\n    \"publisherLogo\",\n    \"body\",\n    \"isAccessibleForFree\"\n];\nfunction NewsArticleJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"NewsArticle\" : _ref$type, keyOverride = _ref.keyOverride, url = _ref.url, title = _ref.title, images = _ref.images, section = _ref.section, dateCreated = _ref.dateCreated, datePublished = _ref.datePublished, dateModified = _ref.dateModified, authorName = _ref.authorName, publisherName = _ref.publisherName, publisherLogo = _ref.publisherLogo, body = _ref.body, isAccessibleForFree = _ref.isAccessibleForFree, rest = _objectWithoutPropertiesLoose(_ref, _excluded$u);\n    var data = _extends({}, rest, {\n        mainEntityOfPage: {\n            \"@type\": \"WebPage\",\n            \"@id\": url\n        },\n        headline: title,\n        image: images,\n        articleSection: section,\n        dateCreated: dateCreated || datePublished,\n        datePublished: datePublished,\n        dateModified: dateModified || datePublished,\n        author: setAuthor(authorName),\n        publisher: setPublisher(publisherName, publisherLogo),\n        articleBody: body,\n        isAccessibleForFree: isAccessibleForFree\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"NewsArticle\"\n    }));\n}\nvar _excluded$t = [\n    \"type\",\n    \"keyOverride\",\n    \"baseSalary\",\n    \"hiringOrganization\",\n    \"applicantLocationRequirements\",\n    \"experienceRequirements\",\n    \"jobLocation\"\n];\nfunction JobPostingJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"JobPosting\" : _ref$type, keyOverride = _ref.keyOverride, baseSalary = _ref.baseSalary, hiringOrganization = _ref.hiringOrganization, applicantLocationRequirements = _ref.applicantLocationRequirements, experienceRequirements = _ref.experienceRequirements, jobLocation = _ref.jobLocation, rest = _objectWithoutPropertiesLoose(_ref, _excluded$t);\n    function setBaseSalary(baseSalary) {\n        if (baseSalary) {\n            return {\n                \"@type\": \"MonetaryAmount\",\n                currency: baseSalary.currency,\n                value: _extends({\n                    \"@type\": \"QuantitativeValue\",\n                    unitText: baseSalary.unitText\n                }, Array.isArray(baseSalary.value) ? {\n                    minValue: baseSalary.value[0],\n                    maxValue: baseSalary.value[1]\n                } : {\n                    value: baseSalary.value\n                })\n            };\n        }\n        return undefined;\n    }\n    function setHiringOrganization(org) {\n        if (org === \"confidential\") {\n            return \"confidential\";\n        }\n        return {\n            \"@type\": \"Organization\",\n            name: org.name,\n            sameAs: org.sameAs,\n            logo: org.logo\n        };\n    }\n    function setJobLocation(location) {\n        if (location) {\n            return {\n                \"@type\": \"Place\",\n                address: {\n                    \"@type\": \"PostalAddress\",\n                    addressCountry: location.addressCountry,\n                    addressLocality: location.addressLocality,\n                    addressRegion: location.addressRegion,\n                    postalCode: location.postalCode,\n                    streetAddress: location.streetAddress\n                }\n            };\n        }\n        return undefined;\n    }\n    function setApplicantLocationRequirements(requirements) {\n        if (requirements) {\n            return {\n                \"@type\": \"Country\",\n                name: requirements\n            };\n        }\n        return undefined;\n    }\n    function setOccupationalExperienceRequirements(requirements) {\n        if (requirements) {\n            return {\n                \"@type\": requirements[\"@type\"] ? requirements[\"@type\"] : \"OccupationalExperienceRequirements\",\n                monthsOfExperience: requirements.minimumMonthsOfExperience\n            };\n        }\n        return undefined;\n    }\n    function setEducationalOccupationalCredential(requirements) {\n        if (requirements) {\n            return {\n                \"@type\": requirements[\"@type\"] ? requirements[\"@type\"] : \"EducationalOccupationalCredential\",\n                credentialCategory: requirements.credentialCategory\n            };\n        }\n        return undefined;\n    }\n    var data = _extends({}, rest, {\n        baseSalary: setBaseSalary(baseSalary),\n        hiringOrganization: setHiringOrganization(hiringOrganization),\n        jobLocation: setJobLocation(jobLocation),\n        applicantLocationRequirements: setApplicantLocationRequirements(applicantLocationRequirements),\n        experienceRequirements: setOccupationalExperienceRequirements(experienceRequirements == null ? void 0 : experienceRequirements.occupational),\n        educationRequirements: setEducationalOccupationalCredential(experienceRequirements == null ? void 0 : experienceRequirements.educational),\n        experienceInPlaceOfEducation: experienceRequirements == null ? void 0 : experienceRequirements.experienceInPlaceOfEducation\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"JobPosting\"\n    }));\n}\nfunction setAddress(address) {\n    if (!address) return undefined;\n    if (!Array.isArray(address)) return toPostalAddress(address);\n    // If array of one address, replace with single address\n    if (address.length === 1) return toPostalAddress(address[0]);\n    // If array, return mapped array of PostalAddresses\n    return address.map(toPostalAddress);\n}\nfunction toPostalAddress(address) {\n    if (typeof address === \"string\") return address;\n    return _extends({\n        \"@type\": \"PostalAddress\"\n    }, address);\n}\nfunction setGeo(geo) {\n    if (geo) {\n        return _extends({}, geo, {\n            \"@type\": \"GeoCoordinates\"\n        });\n    }\n    return undefined;\n}\nfunction setAction(action) {\n    if (action) {\n        return {\n            \"@type\": action.actionType,\n            name: action.actionName,\n            target: action.target\n        };\n    }\n    return undefined;\n}\nfunction setGeoCircle(geoCircle) {\n    if (geoCircle) {\n        return {\n            \"@type\": \"GeoCircle\",\n            geoMidpoint: {\n                \"@type\": \"GeoCoordinates\",\n                latitude: geoCircle.geoMidpoint.latitude,\n                longitude: geoCircle.geoMidpoint.longitude\n            },\n            geoRadius: geoCircle.geoRadius\n        };\n    }\n    return undefined;\n}\nfunction setOffer(offer) {\n    function setPriceSpecification(priceSpecification) {\n        if (priceSpecification) {\n            return {\n                \"@type\": priceSpecification.type,\n                priceCurrency: priceSpecification.priceCurrency,\n                price: priceSpecification.price\n            };\n        }\n        return undefined;\n    }\n    function setItemOffered(itemOffered) {\n        if (itemOffered) {\n            return _extends({}, itemOffered, {\n                \"@type\": \"Service\"\n            });\n        }\n        return undefined;\n    }\n    if (offer) {\n        return _extends({}, offer, {\n            \"@type\": \"Offer\",\n            priceSpecification: setPriceSpecification(offer.priceSpecification),\n            itemOffered: setItemOffered(offer.itemOffered)\n        });\n    }\n    return undefined;\n}\nfunction setOpeningHours(openingHours) {\n    if (openingHours) {\n        return _extends({}, openingHours, {\n            \"@type\": \"OpeningHoursSpecification\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$s = [\n    \"type\",\n    \"keyOverride\",\n    \"address\",\n    \"geo\",\n    \"rating\",\n    \"review\",\n    \"action\",\n    \"areaServed\",\n    \"makesOffer\",\n    \"openingHours\",\n    \"images\"\n];\nfunction LocalBusinessJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"LocalBusiness\" : _ref$type, keyOverride = _ref.keyOverride, address = _ref.address, geo = _ref.geo, rating = _ref.rating, review = _ref.review, action = _ref.action, areaServed = _ref.areaServed, makesOffer = _ref.makesOffer, openingHours = _ref.openingHours, images = _ref.images, rest = _objectWithoutPropertiesLoose(_ref, _excluded$s);\n    var data = _extends({}, rest, {\n        image: images,\n        address: setAddress(address),\n        geo: setGeo(geo),\n        aggregateRating: setAggregateRating(rating),\n        review: setReviews(review),\n        potentialAction: setAction(action),\n        areaServed: areaServed && areaServed.map(setGeoCircle),\n        makesOffer: makesOffer == null ? void 0 : makesOffer.map(setOffer),\n        openingHoursSpecification: Array.isArray(openingHours) ? openingHours.map(setOpeningHours) : setOpeningHours(openingHours)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"LocalBusiness\"\n    }));\n}\nvar _excluded$r = [\n    \"type\",\n    \"keyOverride\",\n    \"mainEntity\"\n], _excluded2 = [\n    \"upvoteCount\"\n];\nfunction QAPageJsonLd(_ref) {\n    var _mainEntity$acceptedA;\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"QAPage\" : _ref$type, keyOverride = _ref.keyOverride, mainEntity = _ref.mainEntity, rest = _objectWithoutPropertiesLoose(_ref, _excluded$r);\n    var data = _extends({}, rest, {\n        mainEntity: _extends({}, mainEntity, {\n            \"@type\": \"Question\",\n            author: setAuthor(mainEntity.author)\n        }, mainEntity.acceptedAnswer && {\n            acceptedAnswer: _extends({}, mainEntity.acceptedAnswer, {\n                \"@type\": \"Answer\",\n                author: setAuthor((_mainEntity$acceptedA = mainEntity.acceptedAnswer) == null ? void 0 : _mainEntity$acceptedA.author)\n            })\n        }, mainEntity.suggestedAnswer && {\n            suggestedAnswer: mainEntity.suggestedAnswer.map(function(_ref2) {\n                var upvoteCount = _ref2.upvoteCount, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n                return _extends({}, rest, {\n                    \"@type\": \"Answer\",\n                    upvoteCount: upvoteCount || 0,\n                    author: setAuthor(rest.author)\n                });\n            })\n        })\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"QAPage\"\n    }));\n}\nfunction setItemListElements(items) {\n    if (items && items.length) {\n        return items.map(function(item) {\n            return {\n                \"@type\": \"ListItem\",\n                position: item.position,\n                item: item.item,\n                name: item.name\n            };\n        });\n    }\n    return undefined;\n}\nvar _excluded$q = [\n    \"type\",\n    \"keyOverride\",\n    \"breadcrumb\"\n];\nfunction ProfilePageJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"ProfilePage\" : _ref$type, keyOverride = _ref.keyOverride, breadcrumb = _ref.breadcrumb, rest = _objectWithoutPropertiesLoose(_ref, _excluded$q);\n    var data = _extends({}, rest, {\n        breadcrumb: Array.isArray(breadcrumb) ? {\n            \"@type\": \"BreadcrumbList\",\n            itemListElement: setItemListElements(breadcrumb)\n        } : breadcrumb\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"ProfilePage\"\n    }));\n}\nvar _excluded$p = [\n    \"type\",\n    \"keyOverride\",\n    \"potentialActions\"\n];\nfunction SiteLinksSearchBoxJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"WebSite\" : _ref$type, keyOverride = _ref.keyOverride, potentialActions = _ref.potentialActions, rest = _objectWithoutPropertiesLoose(_ref, _excluded$p);\n    function setPotentialAction(action) {\n        if (action) {\n            var target = action.target, queryInput = action.queryInput;\n            return {\n                \"@type\": \"SearchAction\",\n                target: target + \"={\" + queryInput + \"}\",\n                \"query-input\": \"required name=\" + queryInput\n            };\n        }\n        return undefined;\n    }\n    var data = _extends({}, rest, {\n        potentialAction: potentialActions.map(setPotentialAction)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"jsonld-siteLinksSearchBox\"\n    }));\n}\nvar _excluded$o = [\n    \"type\",\n    \"keyOverride\",\n    \"authorName\",\n    \"images\",\n    \"yields\",\n    \"category\",\n    \"cuisine\",\n    \"calories\",\n    \"aggregateRating\",\n    \"video\",\n    \"ingredients\",\n    \"instructions\"\n];\nfunction RecipeJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Recipe\" : _ref$type, keyOverride = _ref.keyOverride, authorName = _ref.authorName, images = _ref.images, yields = _ref.yields, category = _ref.category, cuisine = _ref.cuisine, calories = _ref.calories, aggregateRating = _ref.aggregateRating, video = _ref.video, ingredients = _ref.ingredients, instructions = _ref.instructions, rest = _objectWithoutPropertiesLoose(_ref, _excluded$o);\n    var data = _extends({}, rest, {\n        author: setAuthor(authorName),\n        image: images,\n        recipeYield: yields,\n        recipeCategory: category,\n        recipeCuisine: cuisine,\n        nutrition: setNutrition(calories),\n        aggregateRating: setAggregateRating(aggregateRating),\n        video: setVideo(video),\n        recipeIngredient: ingredients,\n        recipeInstructions: instructions ? instructions.map(setInstruction) : undefined\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"recipe\"\n    }));\n}\nfunction setLocation(location) {\n    if (!location) {\n        return undefined;\n    }\n    if (typeof location === \"string\") {\n        return location;\n    }\n    if (\"url\" in location) {\n        return setVirtualLocation(location);\n    } else {\n        return setPlace(location);\n    }\n}\nfunction setVirtualLocation(location) {\n    return _extends({}, location, {\n        \"@type\": \"VirtualLocation\"\n    });\n}\nfunction setPlace(location) {\n    return _extends({}, location, {\n        address: setAddress(location.address),\n        \"@type\": \"Place\"\n    });\n}\nvar _excluded$n = [\n    \"type\"\n];\nfunction setPerformer(performer) {\n    if (performer) {\n        var type = performer.type, restPerformer = _objectWithoutPropertiesLoose(performer, _excluded$n);\n        return _extends({}, restPerformer, {\n            \"@type\": type || \"PerformingGroup\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$m = [\n    \"seller\"\n];\nfunction setOffers(offers) {\n    function mapOffer(_ref) {\n        var seller = _ref.seller, rest = _objectWithoutPropertiesLoose(_ref, _excluded$m);\n        return _extends({}, rest, {\n            \"@type\": \"Offer\"\n        }, seller && {\n            seller: {\n                \"@type\": \"Organization\",\n                name: seller.name\n            }\n        });\n    }\n    if (Array.isArray(offers)) {\n        return offers.map(mapOffer);\n    } else if (offers) {\n        return mapOffer(offers);\n    }\n    return undefined;\n}\nfunction setAggregateOffer(aggregateOffer) {\n    if (aggregateOffer) {\n        return {\n            \"@type\": \"AggregateOffer\",\n            priceCurrency: aggregateOffer.priceCurrency,\n            highPrice: aggregateOffer.highPrice,\n            lowPrice: aggregateOffer.lowPrice,\n            offerCount: aggregateOffer.offerCount,\n            offers: setOffers(aggregateOffer.offers)\n        };\n    }\n    return undefined;\n}\nvar _excluded$l = [\n    \"type\"\n];\nfunction setOrganizer(organizer) {\n    if (organizer) {\n        var type = organizer.type, restOrganizer = _objectWithoutPropertiesLoose(organizer, _excluded$l);\n        return _extends({}, restOrganizer, {\n            \"@type\": type || \"Person\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$k = [\n    \"type\",\n    \"keyOverride\",\n    \"location\",\n    \"images\",\n    \"offers\",\n    \"aggregateOffer\",\n    \"performers\",\n    \"organizer\",\n    \"eventStatus\",\n    \"eventAttendanceMode\"\n];\nfunction EventJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Event\" : _ref$type, keyOverride = _ref.keyOverride, location = _ref.location, images = _ref.images, offers = _ref.offers, aggregateOffer = _ref.aggregateOffer, performers = _ref.performers, organizer = _ref.organizer, eventStatus = _ref.eventStatus, eventAttendanceMode = _ref.eventAttendanceMode, rest = _objectWithoutPropertiesLoose(_ref, _excluded$k);\n    var data = _extends({}, rest, {\n        location: setLocation(location),\n        image: images,\n        offers: offers ? setOffers(offers) : setAggregateOffer(aggregateOffer),\n        performer: Array.isArray(performers) ? performers.map(setPerformer) : setPerformer(performers),\n        organizer: Array.isArray(organizer) ? organizer.map(setOrganizer) : setOrganizer(organizer),\n        eventStatus: eventStatus ? \"https://schema.org/\" + eventStatus : undefined,\n        eventAttendanceMode: eventAttendanceMode ? \"https://schema.org/\" + eventAttendanceMode : undefined\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"Event\"\n    }));\n}\nfunction setContactPoint(contactPoint) {\n    if (contactPoint) {\n        return _extends({}, contactPoint, {\n            \"@type\": \"ContactPoint\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$j = [\n    \"type\",\n    \"keyOverride\",\n    \"contactPoint\"\n];\nfunction CorporateContactJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Organization\" : _ref$type, keyOverride = _ref.keyOverride, contactPoint = _ref.contactPoint, rest = _objectWithoutPropertiesLoose(_ref, _excluded$j);\n    var data = _extends({}, rest, {\n        contactPoint: contactPoint.map(setContactPoint)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"CorporateContact\"\n    }));\n}\nfunction setCreativeWork(creativeWork) {\n    if (creativeWork) {\n        return _extends({}, creativeWork, {\n            \"@type\": \"CreativeWork\"\n        });\n    }\n    return undefined;\n}\nvar _excluded$i = [\n    \"type\",\n    \"keyOverride\",\n    \"hasPart\"\n];\nfunction CollectionPageJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"CollectionPage\" : _ref$type, keyOverride = _ref.keyOverride, hasPart = _ref.hasPart, rest = _objectWithoutPropertiesLoose(_ref, _excluded$i);\n    var data = _extends({}, rest, {\n        hasPart: hasPart.map(setCreativeWork)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"CollectionPage\"\n    }));\n}\nfunction setManufacturer(manufacturer) {\n    if (manufacturer && (manufacturer.manufacturerName || manufacturer.manufacturerLogo)) {\n        return {\n            \"@type\": \"Organization\",\n            name: manufacturer.manufacturerName,\n            logo: setImage(manufacturer.manufacturerLogo)\n        };\n    }\n    return undefined;\n}\nfunction setBrand(brand) {\n    if (brand) {\n        return {\n            \"@type\": \"Brand\",\n            name: brand\n        };\n    }\n    return undefined;\n}\nvar _excluded$h = [\n    \"type\",\n    \"keyOverride\",\n    \"images\",\n    \"brand\",\n    \"reviews\",\n    \"aggregateRating\",\n    \"manufacturerLogo\",\n    \"manufacturerName\",\n    \"offers\",\n    \"aggregateOffer\",\n    \"productName\"\n];\nfunction ProductJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Product\" : _ref$type, keyOverride = _ref.keyOverride, images = _ref.images, brand = _ref.brand, reviews = _ref.reviews, aggregateRating = _ref.aggregateRating, manufacturerLogo = _ref.manufacturerLogo, manufacturerName = _ref.manufacturerName, offers = _ref.offers, aggregateOffer = _ref.aggregateOffer, productName = _ref.productName, rest = _objectWithoutPropertiesLoose(_ref, _excluded$h);\n    var data = _extends({}, rest, {\n        image: images,\n        brand: setBrand(brand),\n        review: setReviews(reviews),\n        aggregateRating: setAggregateRating(aggregateRating),\n        manufacturer: setManufacturer({\n            manufacturerLogo: manufacturerLogo,\n            manufacturerName: manufacturerName\n        }),\n        offers: offers ? setOffers(offers) : setAggregateOffer(aggregateOffer),\n        name: productName\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"Product\"\n    }));\n}\nvar _excluded$g = [\n    \"type\",\n    \"keyOverride\",\n    \"priceCurrency\",\n    \"price\",\n    \"aggregateRating\",\n    \"review\",\n    \"keywords\"\n];\nfunction SoftwareAppJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"SoftwareApplication\" : _ref$type, keyOverride = _ref.keyOverride, priceCurrency = _ref.priceCurrency, price = _ref.price, aggregateRating = _ref.aggregateRating, review = _ref.review, keywords = _ref.keywords, rest = _objectWithoutPropertiesLoose(_ref, _excluded$g);\n    var data = _extends({}, rest, {\n        offers: {\n            \"@type\": \"Offer\",\n            price: price,\n            priceCurrency: priceCurrency\n        },\n        aggregateRating: setAggregateRating(aggregateRating),\n        review: setReviews(review),\n        keywords: keywords\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"SoftwareApp\"\n    }));\n}\nvar _excluded$f = [\n    \"type\",\n    \"keyOverride\"\n];\nfunction VideoJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Video\" : _ref$type, keyOverride = _ref.keyOverride, rest = _objectWithoutPropertiesLoose(_ref, _excluded$f);\n    var data = setVideo(rest, true);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"Video\"\n    }));\n}\nfunction setProducer(producer) {\n    if (producer) {\n        return {\n            \"@type\": \"Organization\",\n            sameAs: producer.url,\n            name: producer.name\n        };\n    }\n    return undefined;\n}\nfunction setProvider(provider) {\n    if (provider) {\n        return {\n            \"@type\": provider.type || \"Organization\",\n            name: provider.name,\n            sameAs: provider.url\n        };\n    }\n    return undefined;\n}\nvar _excluded$e = [\n    \"type\",\n    \"keyOverride\",\n    \"aggregateRating\",\n    \"trailer\",\n    \"reviews\",\n    \"image\",\n    \"authorName\",\n    \"provider\",\n    \"producerName\",\n    \"producerUrl\",\n    \"offers\",\n    \"operatingSystemName\",\n    \"platformName\",\n    \"translatorName\",\n    \"languageName\",\n    \"genreName\",\n    \"publisherName\"\n];\nfunction VideoGameJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"VideoGame\" : _ref$type, keyOverride = _ref.keyOverride, aggregateRating = _ref.aggregateRating, trailer = _ref.trailer, reviews = _ref.reviews, image = _ref.image, authorName = _ref.authorName, provider = _ref.provider, producerName = _ref.producerName, producerUrl = _ref.producerUrl, offers = _ref.offers, operatingSystemName = _ref.operatingSystemName, platformName = _ref.platformName, translatorName = _ref.translatorName, languageName = _ref.languageName, genreName = _ref.genreName, publisherName = _ref.publisherName, rest = _objectWithoutPropertiesLoose(_ref, _excluded$e);\n    var data = _extends({}, rest, {\n        aggregateRating: setAggregateRating(aggregateRating),\n        trailer: setVideo(trailer),\n        review: setReviews(reviews),\n        image: setImage(image),\n        author: setAuthor(authorName),\n        provider: setProvider(provider),\n        producer: setProducer({\n            name: producerName,\n            url: producerUrl\n        }),\n        offers: setOffers(offers),\n        operatingSystem: operatingSystemName,\n        gamePlatform: platformName,\n        translator: translatorName,\n        inLanguage: languageName,\n        genre: genreName,\n        publisher: publisherName\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"VideoGame\"\n    }));\n}\nfunction setContactPoints(contactPoint) {\n    if (contactPoint && contactPoint.length) {\n        return contactPoint.map(function(contactPoint) {\n            return _extends({\n                \"@type\": \"ContactPoint\"\n            }, contactPoint);\n        });\n    }\n    return undefined;\n}\nvar _excluded$d = [\n    \"type\",\n    \"keyOverride\",\n    \"address\",\n    \"contactPoints\",\n    \"contactPoint\"\n];\nfunction OrganizationJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Organization\" : _ref$type, keyOverride = _ref.keyOverride, address = _ref.address, contactPoints = _ref.contactPoints, contactPoint = _ref.contactPoint, rest = _objectWithoutPropertiesLoose(_ref, _excluded$d);\n    var data = _extends({}, rest, {\n        address: setAddress(address),\n        contactPoint: setContactPoints(contactPoint || contactPoints)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"organization\"\n    }));\n}\nfunction setQuestions(questions) {\n    if (questions && questions.length) {\n        return questions.map(function(question) {\n            return {\n                \"@type\": \"Question\",\n                name: question.questionName,\n                acceptedAnswer: {\n                    \"@type\": \"Answer\",\n                    text: question.acceptedAnswerText\n                }\n            };\n        });\n    }\n    return undefined;\n}\nvar _excluded$c = [\n    \"type\",\n    \"keyOverride\",\n    \"mainEntity\"\n];\nfunction FAQPageJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"FAQPage\" : _ref$type, keyOverride = _ref.keyOverride, mainEntity = _ref.mainEntity, rest = _objectWithoutPropertiesLoose(_ref, _excluded$c);\n    var data = _extends({}, rest, {\n        mainEntity: setQuestions(mainEntity)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"faq-page\"\n    }));\n}\nvar _excluded$b = [\n    \"type\",\n    \"keyOverride\"\n];\nfunction LogoJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Organization\" : _ref$type, keyOverride = _ref.keyOverride, rest = _objectWithoutPropertiesLoose(_ref, _excluded$b);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, rest, {\n        scriptKey: \"Logo\"\n    }));\n}\nvar _excluded$a = [\n    \"type\",\n    \"keyOverride\"\n];\nfunction DatasetJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Dataset\" : _ref$type, keyOverride = _ref.keyOverride, rest = _objectWithoutPropertiesLoose(_ref, _excluded$a);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, rest, {\n        scriptKey: \"dataset\"\n    }));\n}\nvar _excluded$9 = [\n    \"type\",\n    \"keyOverride\",\n    \"courseName\",\n    \"provider\"\n];\nfunction CourseJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Course\" : _ref$type, keyOverride = _ref.keyOverride, courseName = _ref.courseName, provider = _ref.provider, rest = _objectWithoutPropertiesLoose(_ref, _excluded$9);\n    var data = _extends({\n        name: courseName\n    }, rest, {\n        provider: setProvider(provider)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"course\"\n    }));\n}\nvar _excluded$8 = [\n    \"type\",\n    \"keyOverride\",\n    \"itemListElements\"\n];\nfunction BreadCrumbJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"BreadcrumbList\" : _ref$type, keyOverride = _ref.keyOverride, itemListElements = _ref.itemListElements, rest = _objectWithoutPropertiesLoose(_ref, _excluded$8);\n    var data = _extends({}, rest, {\n        itemListElement: setItemListElements(itemListElements)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"breadcrumb\"\n    }));\n}\nvar _excluded$7 = [\n    \"type\",\n    \"id\",\n    \"keyOverride\",\n    \"aggregateRating\"\n];\nfunction BrandJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Brand\" : _ref$type, id = _ref.id, keyOverride = _ref.keyOverride, aggregateRating = _ref.aggregateRating, rest = _objectWithoutPropertiesLoose(_ref, _excluded$7);\n    var data = _extends({\n        aggregateRating: setAggregateRating(aggregateRating),\n        \"@id\": id\n    }, rest);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"brand\"\n    }));\n}\nvar _excluded$6 = [\n    \"type\",\n    \"keyOverride\",\n    \"url\",\n    \"title\",\n    \"images\",\n    \"datePublished\",\n    \"dateModified\",\n    \"authorName\",\n    \"publisherName\",\n    \"publisherLogo\",\n    \"description\",\n    \"isAccessibleForFree\"\n];\nfunction ArticleJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"Article\" : _ref$type, keyOverride = _ref.keyOverride, url = _ref.url, title = _ref.title, images = _ref.images, datePublished = _ref.datePublished, dateModified = _ref.dateModified, authorName = _ref.authorName, _ref$publisherName = _ref.publisherName, publisherName = _ref$publisherName === void 0 ? undefined : _ref$publisherName, _ref$publisherLogo = _ref.publisherLogo, publisherLogo = _ref$publisherLogo === void 0 ? undefined : _ref$publisherLogo, description = _ref.description, isAccessibleForFree = _ref.isAccessibleForFree, rest = _objectWithoutPropertiesLoose(_ref, _excluded$6);\n    var data = _extends({\n        datePublished: datePublished,\n        description: description,\n        mainEntityOfPage: {\n            \"@type\": \"WebPage\",\n            \"@id\": url\n        },\n        headline: title,\n        image: images,\n        dateModified: dateModified || datePublished,\n        author: setAuthor(authorName),\n        publisher: setPublisher(publisherName, publisherLogo),\n        isAccessibleForFree: isAccessibleForFree\n    }, rest);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"article\"\n    }));\n}\nfunction setReviewedBy(reviewedBy) {\n    if (reviewedBy) {\n        return _extends({\n            \"@type\": (reviewedBy == null ? void 0 : reviewedBy.type) || \"Organization\"\n        }, reviewedBy);\n    }\n    return undefined;\n}\nvar _excluded$5 = [\n    \"keyOverride\",\n    \"reviewedBy\"\n];\nfunction WebPageJsonLd(_ref) {\n    var keyOverride = _ref.keyOverride, reviewedBy = _ref.reviewedBy, rest = _objectWithoutPropertiesLoose(_ref, _excluded$5);\n    var data = _extends({}, rest, {\n        reviewedBy: setReviewedBy(reviewedBy)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        keyOverride: keyOverride\n    }, data, {\n        type: \"WebPage\",\n        scriptKey: \"WebPage\"\n    }));\n}\nvar _excluded$4 = [\n    \"type\",\n    \"keyOverride\"\n];\nfunction SocialProfileJsonLd(_ref) {\n    var type = _ref.type, keyOverride = _ref.keyOverride, rest = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, rest, {\n        scriptKey: \"social\"\n    }));\n}\nfunction setCost(cost) {\n    if (cost) {\n        return _extends({}, cost, {\n            \"@type\": \"MonetaryAmount\"\n        });\n    }\n    return undefined;\n}\nfunction setSupply(supply) {\n    if (supply) {\n        return supply.map(function(supplyItem) {\n            return {\n                \"@type\": \"HowToSupply\",\n                name: supplyItem\n            };\n        });\n    }\n    return undefined;\n}\nfunction setTool(tool) {\n    if (tool) {\n        return tool.map(function(toolItem) {\n            return {\n                \"@type\": \"HowToTool\",\n                name: toolItem\n            };\n        });\n    }\n    return undefined;\n}\nfunction setStep(step) {\n    if (step) {\n        return step.map(function(stepElement) {\n            var itemListElement = stepElement.itemListElement, image = stepElement.image;\n            var currentListElements = itemListElement == null ? void 0 : itemListElement.map(function(_ref) {\n                var type = _ref.type, text = _ref.text;\n                return {\n                    \"@type\": type,\n                    text: text\n                };\n            });\n            return _extends({}, stepElement, {\n                \"@type\": \"HowToStep\",\n                itemListElement: currentListElements,\n                image: setImage(image)\n            });\n        });\n    }\n    return undefined;\n}\nvar _excluded$3 = [\n    \"type\",\n    \"keyOverride\",\n    \"image\",\n    \"estimatedCost\",\n    \"supply\",\n    \"tool\",\n    \"step\"\n];\nfunction howToJsonLd(_ref) {\n    var _ref$type = _ref.type, type = _ref$type === void 0 ? \"HowTo\" : _ref$type, keyOverride = _ref.keyOverride, image = _ref.image, estimatedCost = _ref.estimatedCost, supply = _ref.supply, tool = _ref.tool, step = _ref.step, rest = _objectWithoutPropertiesLoose(_ref, _excluded$3);\n    var data = _extends({}, rest, {\n        image: setImage(image),\n        estimatedCost: setCost(estimatedCost),\n        supply: setSupply(supply),\n        tool: setTool(tool),\n        step: setStep(step)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"howTo\"\n    }));\n}\nvar _excluded$2 = [\n    \"keyOverride\",\n    \"images\"\n];\nfunction ImageJsonLd(_ref) {\n    var keyOverride = _ref.keyOverride, images = _ref.images, rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({}, rest, {\n        type: \"ImageObject\",\n        keyOverride: keyOverride,\n        dataArray: images,\n        scriptKey: \"image\"\n    }));\n}\nfunction setAmenityFeature(amenityFeature) {\n    if (!amenityFeature) return undefined;\n    if (!Array.isArray(amenityFeature)) {\n        return decorateAmenityFeature(amenityFeature);\n    }\n    if (amenityFeature.length === 1) {\n        return decorateAmenityFeature(amenityFeature[0]);\n    }\n    return amenityFeature.map(decorateAmenityFeature);\n}\nfunction decorateAmenityFeature(amenity) {\n    return _extends({\n        \"@type\": \"LocationFeatureSpecification\"\n    }, amenity);\n}\nvar _excluded$1 = [\n    \"address\",\n    \"geo\",\n    \"images\",\n    \"keyOverride\",\n    \"openingHours\",\n    \"type\",\n    \"amenityFeature\",\n    \"rating\"\n];\nfunction CampgroundJsonLd(_ref) {\n    var address = _ref.address, geo = _ref.geo, images = _ref.images, keyOverride = _ref.keyOverride, openingHours = _ref.openingHours, _ref$type = _ref.type, type = _ref$type === void 0 ? \"Campground\" : _ref$type, amenityFeature = _ref.amenityFeature, rating = _ref.rating, rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n    var data = _extends({\n        image: images,\n        openingHoursSpecification: Array.isArray(openingHours) ? openingHours.map(setOpeningHours) : setOpeningHours(openingHours),\n        address: setAddress(address),\n        geo: setGeo(geo),\n        amenityFeature: setAmenityFeature(amenityFeature),\n        aggregateRating: setAggregateRating(rating)\n    }, rest);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"campground\"\n    }));\n}\nvar _excluded = [\n    \"address\",\n    \"geo\",\n    \"images\",\n    \"keyOverride\",\n    \"openingHours\",\n    \"type\"\n];\nfunction ParkJsonLd(_ref) {\n    var address = _ref.address, geo = _ref.geo, images = _ref.images, keyOverride = _ref.keyOverride, openingHours = _ref.openingHours, _ref$type = _ref.type, type = _ref$type === void 0 ? \"Park\" : _ref$type, rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n    var data = _extends({\n        image: images,\n        openingHoursSpecification: Array.isArray(openingHours) ? openingHours.map(setOpeningHours) : setOpeningHours(openingHours),\n        address: setAddress(address),\n        geo: setGeo(geo)\n    }, rest);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n        type: type,\n        keyOverride: keyOverride\n    }, data, {\n        scriptKey: \"park\"\n    }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-seo/lib/next-seo.module.js\n");

/***/ })

};
;